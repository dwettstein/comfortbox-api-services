{
  "name": "ComfortBox",
  "plural": "ComfortBoxes",
  "base": "PersistedModel",
  "idInjection": true,
  "options": {
    "validateUpsert": true
  },
  "properties": {
    "name": {
      "type": "string"
    },
    "particleId": {
      "type": "string",
      "required": true
    },
    "created": {
      "type": "date"
    }
  },
  "validations": [],
  "relations": {},
  "acls": [],
  "methods": {
    "prototype.isOnline": {
      "accepts": [
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Check if the ComfortBox is connected to Particle Cloud",
      "http": [
        {
          "verb": "get"
        }
      ]
    },
    "prototype.displayText": {
      "accepts": [
        {
          "arg": "text",
          "type": "string",
          "required": true,
          "description": "Text to display on the ComfortBox"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Display a message on a ComfortBox",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.displayLed": {
      "accepts": [
        {
          "arg": "colorsInBase64",
          "type": "string",
          "required": true,
          "description": "Colors to display on the ComfortBox formatted in Base64"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Display various LED colors on a ComfortBox",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.displayHexColor": {
      "accepts": [
        {
          "arg": "colorInHex",
          "type": "string",
          "required": true,
          "description": "Color to display on the ComfortBox formatted in HEX"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Display a single LED color in HEX on a ComfortBox",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.displayData": {
      "accepts": [
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Display the sensors data on the ComfortBox",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.setInterval": {
      "accepts": [
        {
          "arg": "interval",
          "type": "string",
          "required": true,
          "description": "Interval for sending messages from the ComfortBox to the MQTT queue"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Change the interval for sending messages from the ComfortBox to the MQTT queue",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.setMqttHost": {
      "accepts": [
        {
          "arg": "host",
          "type": "string",
          "required": true,
          "description": "IP or hostname of the MQTT message queue"
        },
        {
          "arg": "port",
          "type": "string",
          "required": true,
          "description": "Port of the MQTT message queue"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Change the MQTT host used by a ComfortBox",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.setWorktime": {
      "accepts": [
        {
          "arg": "worktime",
          "type": "string",
          "required": true,
          "default": "08:00-17:00",
          "description": "The worktime in following format: hh:mm-hh:mm"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Change the working hours (worktime) of a ComfortBox (e.g. 08:00-17:00)",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.setShowDataRegularly": {
      "accepts": [
        {
          "arg": "doShowDataRegularly",
          "type": "boolean",
          "required": true,
          "default": false,
          "description": "Boolean whether to show the data regularly or not (true or false)"
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from Particle API"
      },
      "description": "Change if the ComfortBox should show the sensor's data regularly or not",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "prototype.getMetricNames": {
      "accepts": [
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from KairosDB API"
      },
      "description": "Returns a list of all metric names containing this box's Particle id.",
      "http": [
        {
          "verb": "get"
        }
      ]
    },
    "getAllComfortboxesInDB": {
      "accepts": [
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from KairosDB API"
      },
      "description": "Returns a list of Comfortbox ids, which occur in KairosDB.",
      "http": [
        {
          "verb": "get"
        }
      ]
    },
    "queryMetricData": {
      "accepts": [
        {
          "arg": "metricName",
          "type": "string",
          "required": true,
          "description": "The name of the metric."
        },
        {
          "arg": "startRelativeValue",
          "type": "string",
          "required": false,
          "default": "30",
          "description": "The value for the relative start time. This value will be ignored if startAbsolute is given."
        },
        {
          "arg": "startRelativeUnit",
          "type": "string",
          "required": false,
          "default": "days",
          "enum": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
          "description": "The unit for the relative start time. One of: years, months, weeks, days, hours, minutes, seconds, milliseconds. This value will be ignored if startAbsolute is given."
        },
        {
          "arg": "startAbsolute",
          "type": "number",
          "required": false,
          "description": "The start time in milliseconds since 1.1.1970 (Unix Epoch Timestamp). One of relative or absolute must be given."
        },
        {
          "arg": "endRelativeValue",
          "type": "string",
          "required": false,
          "description": "The value for the relative end time. Default is the current time. This value will be ignored if endAbsolute is given."
        },
        {
          "arg": "endRelativeUnit",
          "type": "string",
          "required": false,
          "enum": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
          "description": "The unit for the relative end time. One of: years, months, weeks, days, hours, minutes, seconds, milliseconds. This value will be ignored if endAbsolute is given."
        },
        {
          "arg": "endAbsolute",
          "type": "number",
          "required": false,
          "description": "The end time in milliseconds since 1.1.1970 (Unix Epoch Timestamp). Default is the current time. One of relative or absolute must be given."
        },
        {
          "arg": "aggregatorName",
          "type": "string",
          "required": false,
          "enum": ["avg", "count", "dev", "diff", "div", "first", "gaps", "last", "least_squares", "max", "min", "percentile", "rate", "sampler", "save_as", "scale", "sum", "trim"],
          "description": "The name of the aggregator function. One of: avg, count, dev, diff, div, first, gaps, last, least_squares, max, min, percentile, rate, sampler, save_as, scale, sum, trim"
        },
        {
          "arg": "aggregatorValue",
          "type": "string",
          "required": false,
          "description": "The value for the aggregator sampling. Mandatory if aggregatorName is given."
        },
        {
          "arg": "aggregatorUnit",
          "type": "string",
          "required": false,
          "enum": ["years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds"],
          "description": "The unit for the aggregator sampling. One of: years, months, weeks, days, hours, minutes, seconds, milliseconds. Mandatory if aggregatorName is given."
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from KairosDB API"
      },
      "description": "Returns a list of values from the given metric.",
      "http": [
        {
          "verb": "post"
        }
      ]
    },
    "queryMetricDataByJson": {
      "accepts": [
        {
          "arg": "query",
          "type": "string",
          "required": true,
          "description": "The query in JSON format. See https://kairosdb.github.io/docs/build/html/restapi/QueryMetrics.html for more info."
        }
      ],
      "returns": {
        "arg": "response",
        "type": "string",
        "root": true,
        "description": "Response from KairosDB API"
      },
      "description": "Returns a list of values from the given query.",
      "http": [
        {
          "verb": "post"
        }
      ]
    }
  }
}
